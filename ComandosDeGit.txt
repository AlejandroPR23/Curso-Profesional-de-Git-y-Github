- = Comando con abreviación de palabra
-- = Comando con palabra completa

$ git init

Inicializa el repositorio en Git

$ git add ComandosDeGit.txt

Se agrega el archivo a la area de espera para ser subido al repositorio

$ git add .

Se agregan todos los archivos a la area de espera para ser subidos al repositorio

$ git commit -m "Mensaje"

Sube los archivos al repositorio

$ git commit -am 

Añade los cambios al commit es la combinación del git add . y el commit clasico, no funciona si los archivos nunca han sido rastreados con un add normal



$ git status

Me permite saber que archivos estan en el area de espera

$ git show

Mostrara todos los cambios que hemos hecho

$git show archivo

Mostrara todos los cambios que hemos hecho en un archivo especifico

$ git log ComandosDeGit.txt

Ver historia de un archivo


$ git log --stat 

Se van a poder ver los cambios especificos que se hicieron en cuales archivos a partir de un commit

code 

Abre el VS(Visual Studio Code)

$ git rm historia.txt

Se quita el archivo de git de stagging

$ git rm --cached historia.txt 

se elimina el cache del archivo de la sala de espera pero se mantiene en el disco duro

$ git rm --force

Elimina el archivo de git y del disco duro puede recuperarse por versiones anteriores





Configurar quienes somos:

$ git config 

Lista de todas las configuraciones que tiene git

$ git config --List

Configuración por defecto de tu git y las cosas que le faltan

$ git config --list --show-origin

Muestra en donde estan las configuraciones guardadas (Directorios)

$ git config --global user.name "Tu Nombre"

Sirve para cambiar la configuración del nombre a nivel global

$ git config --global user.email "Tu correo"

Sirve para cambiar la configuración del correo a nivel global

esc + Shift + zz (para salir de comandos de bean tambien fuerza el envio de los commit que no llevan un mensaje)
Q Me permite salir de comandos cuando lo mostrado es muy largo


$ git diff commitA commitB (recomendación: la versión más vieja va primero que la más nueva)

Comparar versiones del archivo(Primero es recomendable hacer el log debido a que el nombre del commit es la combinación de letras y numeros que aparece alli)



Cunado no se agrega un archivo a la zona de espera(Staging) con el $ git add  ese archivo queda sin rastrear
al usar el $ git add el archivo queda rastreado

traer un cambio que esta en el repositorio:

$ git checkout

Traes los ultimos cambios o los que quieras de ciertos archivos

$ git checkout versioncommit Nombrearchivo

Traes los cambios que quieras de un archivo especifico

$ git checkout master Nombrearchivo

trae la versión actual del archivo que se encuentre en el repositorio o en el master

$ git reset versionanterior --hard

Sirve para volver TODO a una versión anterior del repositorio (Se pierde el actual)

$ git reset versionanterior --mixed

Borra todo, exactamente todo, de los commits y del area de stagging

$ git reset versionanterior --soft

Sirve para volver a una versión anterior del repositorio pero los cambios que esten en la sala de espera seguiran ahí

$ git reset HEAD

Saca los archivos del area de stagging.


Repositorio Remoto:

$ git clone url

Con el link del repositorio de GitHub se trae una copia del master y de los Directorios

$ git push

Se envian todos los cambios, commits que se encuentran almacenados en git de forma local al repositorio Remoto

$ git fetch

trae los cambios del repositorio remoto y los almacena en el repositorio local, pero no trae los archivos

$ git merge

combina los archivos actuales que tengo con los cambios traidos del repositorio remoto

$ git pull

Combinación de fetch y merge




Ramas o branches de Git:

$ git branch nombre

Crear nueva rama 

$ git branch --list

Lista de ramas existentes

$ git branch --delete nombrerama

Borra la rama que se le indique

$ git branch -D  nombrerama

Fuerza la eliminación de las ramas que aún no han sido fusionadas

$ git branch -v 

Muestra el ultimo commit de cada rama

$ git branch --merged

Lista de ramas que se fusionaron con la rama actual

$ git branch --no-merged 

Lista de ramas que no se han fusionado con la actual


$ git checkout nombrerama

cambiar a la nueva rama

$ git checkout -b 

creara una nueva ram y saltara a ella de manera inmediata

$ git merge nombrarama (se hace desde la rama principal) "mensaje opcional"

Une los cambios de una rama con otra

$ git merge --abort

Anula el merge y de vuelbve todo a como estaba antes



Resolución de conflictos al hacer un merge:

Al unificar los cambios si hay un error se debe decidir cual parte del codigo dejar y cual no.





Llaves publicas y llaves privadas (cifrado asimetrico de un solo camino):

1. Se debe abrir git bash y asegurarnos de estar en la carpeta home del pc son el comado pwd

2. comandos:

ssh-keygen -t rsa -b 4096 -C "perezrestrepoalejandro9@gmail.com"

esto nos genera la llave y nos pide donde guardarla, recomendable hacerlo en la carpeta home

tambien se nos pedira una contraseña si queremos ponemos una o no

Ahora se tiene que agregar la llave al entorno o sistema operativo que estemos usando para que sepa que la llave existe:

revisamos el servidor de llaves para evaluar que se dispare:

eval $(ssh-agent -s)

Agregamos la llave privada a nuestro sistema o servidor:

ssh-add ~/.ssh/id_rsa





































                                                                                                                                                                                                                                                                                                                                                                                       