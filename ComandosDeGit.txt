- = Comando con abreviación de palabra
-- = Comando con palabra completa

$ git --help

$ git config --global init.defaultBranch main

Hace que de ahora en adelante cada vez que se inicialice un repositorio este tenga como rama principal la main

$ git init

Inicializa el repositorio en Git

$ git add ComandosDeGit.txt

Se agrega el archivo a la area de espera para ser subido al repositorio

$ git add .

Se agregan todos los archivos a la area de espera para ser subidos al repositorio

$ git commit -m "Mensaje"

Sube los archivos al repositorio

$ git commit -am 

Añade los cambios al commit es la combinación del git add . y el commit clasico, no funciona si los archivos nunca han sido rastreados con un add normal



$ git status

Me permite saber que archivos estan en el area de espera

$ git show

Mostrara todos los cambios que hemos hecho

$git show archivo

Mostrara todos los cambios que hemos hecho en un archivo especifico

$ git log ComandosDeGit.txt

Ver historia de un archivo


$ git log --stat 

Se van a poder ver los cambios especificos que se hicieron en cuales archivos a partir de un commit

$ git log --all --graph

Muestra como han funcionado las ramas

$ git log --all --graph --decorate --oneline

Muestra todas las ramas del repositorio de una manera mucho más resumida

alias jamon "$ git log --all --graph --decorate --oneline"

se le pone un alias al comando para que sea más sencillo y rapido de escribir

code 

Abre el VS(Visual Studio Code)

$ git rm historia.txt

Se quita el archivo de git de stagging

$ git rm --cached historia.txt 

se elimina el cache del archivo de la sala de espera pero se mantiene en el disco duro

$ git rm --force

Elimina el archivo de git y del disco duro puede recuperarse por versiones anteriores





Configurar quienes somos:

$ git config 

Lista de todas las configuraciones que tiene git

$ git config --List

Configuración por defecto de tu git y las cosas que le faltan

$ git config --list --show-origin

Muestra en donde estan las configuraciones guardadas (Directorios)

$ git config --global user.name "Tu Nombre"

Sirve para cambiar la configuración del nombre a nivel global

$ git config --global user.email "Tu correo"

Sirve para cambiar la configuración del correo a nivel global

esc + Shift + zz (para salir de comandos de vim tambien fuerza el envio de los commit que no llevan un mensaje)
Q Me permite salir de comandos cuando lo mostrado es muy largo


$ git diff commitA commitB (recomendación: la versión más vieja va primero que la más nueva)

Comparar versiones del archivo(Primero es recomendable hacer el log debido a que el nombre del commit es la combinación de letras y numeros que aparece alli)



Cunado no se agrega un archivo a la zona de espera(Staging) con el $ git add  ese archivo queda sin rastrear
al usar el $ git add el archivo queda rastreado

traer un cambio que esta en el repositorio:

$ git checkout

Traes los ultimos cambios o los que quieras de ciertos archivos

$ git checkout nombrerama

Cambiar de una rama a otra

$ git switch nombrerama

Cambiar de una rama a otra

$ git checkout -b nombrerama

Crea una nueva branche y pasa directamente a ella

$ git checkout versioncommit Nombrearchivo

Traes los cambios que quieras de un archivo especifico

$ git checkout master Nombrearchivo

trae la versión actual del archivo que se encuentre en el repositorio o en el master

$ git revert commit numerosdelcommit

revierte los cambios de un commit anterior, y crea un nuevo commit donde se dice que se hizo una reversión a un anterior commit

$ git reset versionanterior --hard

Sirve para volver TODO a una versión anterior del repositorio (Se pierde el actual)

$ git reset versionanterior --mixed

Borra todo, exactamente todo, de los commits y del area de stagging

$ git reset versionanterior --soft

Sirve para volver a una versión anterior del repositorio pero los cambios que esten en la sala de espera seguiran ahí

$ git reset HEAD

Saca los archivos del area de stagging.


Repositorio Remoto:

$ git clone url

Con el link del repositorio de GitHub se trae una copia del master y de los Directorios

$ git push origin

Se envian todos los cambios, commits que se encuentran almacenados en git de forma local al repositorio Remoto

$ git fetch

trae los cambios del repositorio remoto y los almacena en el repositorio local, pero no trae los archivos

$ git merge

combina los archivos actuales que tengo con los cambios traidos del repositorio remoto

$ git pull origin

Combinación de fetch y merge




Ramas o branches de Git:

$ git branch nombre

Crear nueva rama 

$ git branch -m nuevonombre

Cambiar el nombre del branch en el que nos encontramos

$ git branch --list

Lista de ramas existentes

$ git branch --delete nombrerama

Borra la rama que se le indique

$ git branch -D  nombrerama

Fuerza la eliminación de las ramas que aún no han sido fusionadas

$ git branch -v 

Muestra el ultimo commit de cada rama

$ git branch --merged

Lista de ramas que se fusionaron con la rama actual

$ git branch --no-merged 

Lista de ramas que no se han fusionado con la actual


$ git checkout nombrerama

cambiar a la nueva rama

$ git checkout -b 

creara una nueva ram y saltara a ella de manera inmediata

$ git merge nombrarama (se hace desde la rama principal) "mensaje opcional"

Une los cambios de una rama con otra

$ git merge --abort

Anula el merge y de vuelbve todo a como estaba antes



Resolución de conflictos al hacer un merge:

Al unificar los cambios si hay un error se debe decidir cual parte del codigo dejar y cual no.





Llaves publicas y llaves privadas (cifrado asimetrico de un solo camino):

1. Se debe abrir git bash y asegurarnos de estar en la carpeta home del pc son el comado pwd

2. comandos:

ssh-keygen -t rsa -b 4096 -C "perezrestrepoalejandro9@gmail.com"

esto nos genera la llave y nos pide donde guardarla, recomendable hacerlo en la carpeta home

tambien se nos pedira una contraseña si queremos ponemos una o no

Ahora se tiene que agregar la llave al entorno o sistema operativo que estemos usando para que sepa que la llave existe:

revisamos el servidor de llaves para evaluar que se dispare:

eval $(ssh-agent -s)

Agregamos la llave privada a nuestro sistema o servidor:

ssh-add ~/.ssh/id_rsa

$ssh -T git@github.com

Establecer una conexión ssh con github para ver que todo este fluyendo con normalidad




Como relacionar nuestras credenciales de SSH con nuestro GitHub?

Nos dirigimos a nuestro perfil y vamos a settings, alli en el aprtado de SSH keys daremos en crear una nueva,
ahi pegaremos nuestra llave publica y listo

$ git remote add origin url

Ponemos la url de un repositorio para linkearlo a nuestra carpeta

$ git remote -v 

nos muestra hacia donde podemos hacer push y hacia donde podemos hacer pulls







Establecer rama main como la principal:

$ git branch -m main

para traer los datos del repositorio y subir los que tenemos:

$ git pull origin main

$ git config pull.rebase false

$ git pull origin main --allow-unrelated-histories

$ git push origin main



Poner tags a los commits:

$ git tag nombretag

Crea un tag para la versión actual en la que se encuentre en proyecto

$ git tag -a v=0.1 -m "Primeras clases" numerosdelcommit

Crea al tag para un commit especifico

$ git tag

Muestra una lista con todos los tags

$ git show-ref --tags

Muestra los tags y el commit al que estan relacionados


Enviar tag a GitHub:

$ git push origin --tags

Envia a GitHub los tags que creamos


$ git tag -d nombreTag

Elimina un tag del entorno local

$ git push origin :refs/tags/dormido

Lo elimina de GitHub tambien



Enviar diferentes branches al GitHUb:

$ git show-branch 

Muestra la lista de branches que hay actualmente


$ git show-branch --all

Muestra la lista de branches de una manera más especifica

gitk

Abre una aplicación donde se pueden ver las branchs y todos los commits

$ git push origin nombrebranch (desde el branch)

Manda a GitHub el branch o rama 

$ git push -u origin nombrebranch

Sube los commits de la rama y la rama a GitHub

$ git branch header

Crea un nuevo branch

$ git branch footer

crea un nuevo branch


$git pull origin nombrerama

Se trae del repositorio una rama especifica


En los entornos reales de programación los merge con el main son revisados y deben pasar por un proceso de validación


Hacer pull-request despues de hacer un merge desde otra rama al main:

Nos dirigimos a pull-request y damos en new pull-request o dmos directamente en el cartel que nos aparecera al entrar al repositorio

alli escogemos la rama que queremos comparar con nuestra rama main

tambien podemos agregar a alguien más para que nos ayude a revisarla

Desde la vista de quien lo revisa se puede hacer un review changes

Donde puede aprobar el merge o pedir cambios o simplemente poner un comentario

luego de hacer los cambios requeridos en caso nos lo pidan podemos volver a hacer el push y volver enviar los cambios a una nueva revisión

alli podran se aceptados o denegados nuevamente

creando un Fork:
Fork es tomar una copia del estado actual del proyecto y clonarloarlo

Hacer un pull desde un fork:

$ git remote add upstream https://github.com/AlejandroPR23/Curso-Profesional-de-Git-y-Github.Git

Agrega al repositorio original a uno remoto para poder hacer pulls y se le ponde un nombre en este caso "upstream"

$ git pull upstream origin

Se llaman los cambios al fork del repositorio original

Todo esto se puede hacer directamente desde gitHub

Tener un servidor local desde npm:

npm install --global http-server

http-server

inicia el server

Ignorar archivos en el repositorio con .gitignore (Por ejemplo iamgenes ya que los binarios para GitHub son muy extraños):

1. Nos dirigimos a nuestra carpeta y creamos un archivo llamado .gitignore

Allí pondremos todos los tipos de archivos que git debería ignorar por ejemplo:

*.jpg (Significa que todos los jpg seran ignorados)
*.jpeg (Significa que todos los jpeg seran ignorados)


Readme.md es una excelente practica:

Sirve para contarle al mundo para que es un repositorio

Se le pueden agregar markdowns y hmtl al mismo tiempo

Se puede edita desde el VS o en MEditor.md 




Sitio web publico con GitHub pages:

1.Se abre pages.github.com

2.Creas un nuevo repositorio que tenga tu nombre de usuario.github.io

3. Vas al home en el pc con cd ~

4. $ git clone urlrepositorio

5.Crear un nuevo archivo index.html

6.Hacer el push al repositorio

7.Vamos al repositorio settings, pages y en pages elegimos el branch del cual desplegaremos el index.html

8.Ahora nos dirigimos a la pagina con nuestro nombre asi: AlejandroPR23.github.io y listo

9. Extra (Crear una pagina personalizada de error 404 para GitHub Pages):https://docs.github.com/es/pages/getting-started-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site


Rebase en Git(Muy mala practica con repositorios remotos, se recomienda hacerlo unicamente en locales):

1. Se crea una nueva rama

2. Se hacen los cambios que queramos

3. Estando en la rama creada ejecutamos: $ git rebase main

4. EN caso hayan problemas de union podremos ir pasando uno a uno con el comando $ git rebase --continue

5. Cambiamos a la rama principal y hacemos: $ git rebase nombreramarebase, y listo ahora las dos ramas se habran fusionado correctamente



Git stash (Imaginemos cuando queremos cambiar de rama y no queremos hacer commit a nuestros cambios, pero los queremos guardar, eso se hace con stash)

$ git stash

Guardar los cambios del archivo actual temporalmente en un lugar que no es visible

$ git stash -u 

Guardar todos los cambios de todos los archivos

$ git stash save "mensaje"

Guardar los cambios temporalmente con un nombre especifico

$ git stash list

Muestra la lista de cambios que estan guardados temporalmente

$ git branch nombrerama stash@(<num_stash>)

Crear un rama y aplicar el stash 

$ git stash pop  

Libera por decir de alguna manera de nuevo los cambios que habiamos hecho para ahora si hacer el commit (Pueden ser liberados en cualquier rama si asi lo queremos)

$ git stash pop stash@(<num_stash>)

Libera un cambio especifico

$ git stash drop

elimina el ultimo cambio agregado a la lista de cambios que se guardan temporalmente

$ git stash drop stash@(<num_stash>)

elimina un stash especifico

$ git stash clear

elimina toda la lista de stash


Git clean (Eliminar archivos que no sirven o que no deberian estar)

$ git clean --dry-run     (Debe hacerse primero obligatoriamente)

Revisar que archivos no tienen un seguimiento y van a ser eliminados a futuro

$ git clean

Elimina los archivos que nos son mostrados por el comando anterior 

$ git clean -f 

Elimina los archivos (Usar en caso el anterior no funcione)




Git cherry-pick (Trae cambios desde otra mara a la principal) Es mala practica no usar demasiado

$ git cherry-pick nombrecommitdelaotraram

trae el commit de la otra rama a la principal cabe aclarar que ese comit tendra el mismo nombre que en la otra ramas

$ git cherry-pick nombrecommitdelaotraram -n 

Traemos los cambios del commit pero sin que se ejecute el commit

$ git cherry-pick nombrecommitdelaotraram -e "Cambio"

Cambiamos el nombre del commit


Crear un issue template: 

1. Creamos una carpeta .github en nuestro repo local
2. Dentro de .github creamos otra carpeta llamada ISSUE_TEMPLATE
3. Creamos un archivo llamado bug_report.md
4. Ponemos una plantilla para ingresar errores
5. En GitHub vamos al apartado issue en nuestro repositorio y ahí aparecera la plantilla.
6. Podremos agregar plantillas para los otro tipos de errores tambien.

GitHub Projects

1. Ingresar a GitHub.com
2. Dirijirnos al modulo de proyectos
3. Al dar en crear se nos mostrarán una gran cantidad de plantillas para aplicarlas a nuestro proyecto
4. Dependiendo la plantilla que elijamos podremos ir organizando cada tarea y asignadola a alguien
5. Vincular proyecto y repositorio:
6. al lado de draft daras en los 3 puntos
7. Le damos en convertir en issue y elegimos un proyecto

Hacer archivos .md más limpios y mucho mejores:

1. Instala la extensión de markdownlint
2. Desde el icono de cuadro con lupa en el lado superior derecho se puede ver la vista previa de los MD en VS


Herramienta para hacer diagramas de trabajo de ramas en GitHub:
1. Ir a Mermaid
2. Dirigirse a mermaid live
3. Ingresa gitGraph:
4. Palabras que pueden usarse para hacer el diagrama commit, branch develop, checkout develop, checkout main, merge develop, commit


Personalizar tu GitHub
1. Crea un repositorio con el nombre de tu usuario
2. Crea un readme.md
3. Personaliza el readme y listo


GitHub Wikis:
1. Con wiki podemos generar un nivel de documentación mucho más estructurado de nuestros repositorios
2. Nos dirigimos a nuestro repositorio y buscamos la opción de wiki
3. Daremos en crear wiki
4. Agregaremos más paginas
5. Crearemos una sidebar
6. Se creativo


GitHub Gist(Manera sencilla de compartir fragmentos de codigo que no necesitan estar ligados a algun repositorio):
1. Vamos a la pagina gist.github.com



Automatizar GitHub Projects

1. En GitHub projects nos dirigimos a los tres puntos al lado de insight y elegimos workflows
2. Allí podremos elegir varias secciones que nos facilitan la automatización en la gestión del proyecto
3. A la hora de hace un pull request podemos poner la palabra closes #(elegir tarea puesta)


Git Reset y Reflog




















